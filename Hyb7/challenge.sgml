<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
<!ENTITY challenge.irc SYSTEM "challenge.irc">
]>

<article>
  <articleinfo>
    <title>Oper Challenge and Response System</title>

    <copyright>
      <year>2001</year>
      <holder role="mailto:hybrid@the-project.org">ircd-hybrid team</holder>
    </copyright>

    <releaseinfo>$Id: challenge.sgml,v 1.5 2002/04/30 18:36:45 wcampbel Exp $</releaseinfo>
  </articleinfo>

  <para>In an effort to reduce the damage caused to a network by a
        <emphasis>hacked</emphasis> O-line, Hybrid supports an
        <application>OpenSSL</application> based challenge-response
        system.  This new system allows the admin to remove all oper block
        passwords from the conf file.  Authentication is done through a
        public/private key.</para>

  <sect1>
    <title>Requirements</title>

    <para>The <command>ircd</command> must be compiled with the
          <option>--enable-openssl</option> option to <command>configure
          </command>.  If <command>configure</command> detects a working
          openssl library, <option>--enable-openssl</option> is implicitly
          enabled.</para>

    <para><literal>oper {}</literal> blocks should not have
          <emphasis>normal</emphasis> passwords, but should contain the
          the name of the private key file.  However it is possible for the
          user to use both challenge and normal passwords, but this would
          defeat the purpose of the challenge system.</para>

    <para><filename>m_challenge.so</filename> must be loaded.</para>

    <para>The oper has their private key file and an implementation of the
          <link linkend="rsarespond">RSA Respond tool</link> available to
          be run.</para>
  </sect1>

  <sect1>
    <title>Process</title>

    <para>Each oper should have a private key file and a public key file.
          The keys can be generated with the <command>mkkeypair</command>
          utility provided in <filename>tools/</filename>.  The keys are
          compatible with cryptlink keys.</para>

    <para>The oper keeps their private key file in a safe place, and gives
          their public key file to their admin(s).</para>

    <para>The admin will place an entry for the public key file into a field
          called <literal>rsa_public_key_file</literal> of each oper's
          <literal>oper {}</literal> block in the conf file.</para>

    <para>The oper wishes to obtain their operator status, and issues the
          <command>CHALLENGE</command> command.</para>

    <para>The server will print out a long hexadecimal string, that needs to
          be fed to the <command>respond</command> utility provided in
          <filename>tools/rsa_respond</filename>.</para>

    <para>The <command>respond</command> program will generate an answer that
          is fed back to the <command>CHALLENGE</command> command.</para>
  </sect1>

  <sect1>
    <title>Generating the Key Files</title>

    <para>The keys can be generated with the <command>openssl</command>
          command as follows:</para>

    <screen>
      openssl genrsa -des3<co id="co-des3"> -out rsa.key 1024<co id="co-keysize">
      openssl rsa -in rsa.key -pubout -out rsa.pub
    </screen>

    <calloutlist>
      <callout arearefs="co-des3">
        <para>The <option>-des3</option> must be included in order to create
              a key with a passphrase.  Omitting this option will create
              a non protected key.</para>
      </callout>

      <callout arearefs="co-keysize">
        <para>The key size must be 1024 or below.  The challenge sent for a
              longer keysize will be too long to fit into the ircd's 512 byte
              line constraint.</para>
      </callout>
    </calloutlist>

    <para>It is <emphasis>highly recommended</emphasis> that you set a
          password on your private key.</para>

    <para>The <command>tools/mkkeypair</command> utility cannot be used to
          create a key suitable for use in CHALLENGE.</para>
  </sect1>

  <sect1>
    <title>Using CHALLENGE and respond</title>

    <!-- ugh, Netscape 4.x doesn't support &trade;, so I have to use &copy; -->
    <note><para>All examples assume the use of the stock
                <command>respond</command> client included with the Hybrid 7
                source, run on a <trademark class="copyright">UNIX</trademark>
                platform.</para></note>

    <para>The administrator of the server you oper on should remove the
          password in your <literal>oper {}</literal> block and replace it
          with an entry for your public key, so that <command>/oper</command>
          will be disabled.</para>

    <note>
      <para>The public key is a VERY long string.</para>
    </note>

    <para>The oper will issue <command>/challenge
          <replaceable>oper_nick</replaceable></command>, and see something
          like below:</para>

    <screen>*** 56F1FDAE4C590C524CF758917E62C2A2A1376CB9C4C2E7D411BB0AD9C4A
605A2D05A94E7254197E9D71438B5FB565B6FD35465E462305F35F4A2D45311
F983B3E062F635912FA155B4B1E18EAA782CC107F4C9DA83092658D16A2E88A
6BCF9820F5A044A29CDD4C062F05BF509CA3B561375CBC4179BD1CF6026BDE9
60E52C6B</screen>

    <note>
      <para>The challenge is all on one line.</para>
    </note>

    <note>
      <para>With some clients, the oper will have to issue <command>/quote
            CHALLENGE</command> instead of <command>/challenge</command>.
            </para>
    </note>

    <para>The oper will then have to feed that challenge to the
          <command>respond</command> program.</para>

    <sidebar>
      <para>The respond utility's syntax is:</para>

      <!-- Unfortunately, screen cares about whitespace -->

      <screen><prompt>$</prompt> <command>./respond</command> <userinput>private_key_file</userinput> <userinput>challenge_from_server</userinput>
      </screen>

      <!-- HTML (and therefore txt) is fine with two sidebars in a row...  --
        -- print versions (TeX, PDF, PostScript) are not.  These two       --
        -- sidebars have to be merged together -Hwy                        -->

      <para>Example:</para>

      <screen><prompt>wcampbel@botbay (rsa_respond):</prompt> <command>./respond hwy.key \
56F1FDAE4C590C524CF758917E62C2A2A1376CB9C4C2E7D411BB0AD9C4A605A2D0
5A94E7254197E9D71438B5FB565B6FD35465E462305F35F4A2D45311F983B3E062
F635912FA155B4B1E18EAA782CC107F4C9DA83092658D16A2E88A6BCF9820F5A04
4A29CDD4C062F05BF509CA3B561375CBC4179BD1CF6026BDE960E52C6B</command>
Keyphrase:
6B882932DD00F86123869E401F7334B9B0D0018A60F1DE244E90E47246AA87C7</screen>

       <note>
         <para>The challenge parameter must be on one line.</para>
       </note>
    </sidebar>

    <para>The keyphrase must be entered properly to get the response.  The
          bottom line is the response that must be sent back to the
          server.</para>

    <para>The oper will issue the following command in order to obtain operator
          status:</para>

    <para><command>/challenge
          +6B882932DD00F86123869E401F7334B9B0D0018A60F1DE244E90E47246AA87C7
          </command></para>

    <note>
      <para>The '+' is needed</para>
    </note>

    <para>If successful, the oper will obtain operator status on the
          server.</para>

    <warning>
      <para>If the <command>CHALLENGE</command> fails, and you use ircII,
            EPIC, or BX, you may get disconnected with the client asking
            for the server password.  This is a client bug, not an ircd
            bug.</para>
    </warning>
  </sect1>

  <sect1 id="rsarespond">
    <title>RSA Respond Tool</title>

    <para>The RSA Respond tool is a vital part of challenge/response system.
          In order to function, the operator must have must have a way to
          quickly issue the respond command, and to copy and paste data to and
          from the IRC client.</para>

    <para>The <command>respond</command> source code is included with the
          Hybrid 7 source, in the <filename>tools/rsa_respond</filename>
          directory.  A distributable tar file can easily be created by
          issuing <userinput>make rsa_respond</userinput> in the root of the
          source tree.  The file <filename>rsa_respond.tar.gz</filename> will
          be created in the root of the source tree.</para>

    <para><filename>rsa_respond.tar.gz</filename> should compile with little
          or no modifications<footnote><para>Some platforms may require
          <filename>Makefile</filename> changes in order to link in the OpenSSL
          library.  This may change in the future.</para></footnote> on most
          <trademark class="copyright">UNIX</trademark> and UNIX-like
          platforms<footnote>
          <para>Platforms known to function include: Linux, FreeBSD, Solaris,
          and Cygwin.</para></footnote>.  The <filename>README</filename> in
          the tar archive gives more information.</para>

    <para>A copy of the source tar file is available on <ulink
          url="http://ircd.botbay.net/pub/hybrid/rsa/rsa_respond.tar.gz">http://ircd.botbay.net/pub/hybrid/rsa/rsa_respond.tar.gz</ulink>.

    <para>For Windows platforms, there are two available RSA Respond tools.
          One is a text only port of the stock tool.  The binary is available
          from <ulink url="http://ircd.botbay.net/pub/hybrid/rsa/rsa_respond-bin.tar.gz">http://ircd.botbay.net/pub/hybrid/rsa/rsa_respond-bin.tar.gz</ulink>.
          The other tool is a GUI enabled version<footnote><para>A screenshot
          of the program is available on <ulink
          url="http://kabel.pp.ru/sgml/winrespond.png">http://kabel.pp.ru/sgml/winrespond.png</ulink>
          .</para></footnote>.  The source tree<footnote>
          <para>The winrespond source depends on a working, up to date, Cygwin
          installation.</para></footnote> is available from <ulink
          url="http://ircd.botbay.net/pub/hybrid/rsa/winrespond-src.tar.gz">http://ircd.botbay.net/pub/hybrid/rsa/winrespond-src.tar.gz</ulink>.
          A binary distribution is available from <ulink
          url="http://ircd.botbay.net/pub/hybrid/rsa/winrespond-bin.tar.gz">http://ircd.botbay.net/pub/hybrid/rsa/winrespond-bin.tar.gz</ulink>.
          </para>

    <para>With the appropriate version of the RSA Respond tool, any operator
          can protect their privileged access to the server, with little
          additional effort over using standard operator passwords.</para>
  </sect1>

  <sect1>
    <title>Benefits</title>

    <para>The greatest benefit of using the challenge/response system is
          that there are no passwords sent over the network in plaintext.
          There are also no credentials left on the server side, as only
          public keys are kept in the conf.  The use of public/private key
          encryption provides far greater security over having a single
          password, and may (if the key is kept secure, and has a good
          passphrase) virtually eliminate hacked O-lines.</para>
  </sect1>

  <appendix>
    <title>Numerics</title>

    <para>XXX - Complete after testing callouts and includes</para>
  </appendix>

  <appendix>
    <title>Scripting</title>

    <para>The following script is for EPIC 4 only.  It was written by
          Greg Prosser, xyst
          &lt;<ulink url="gregp@blackened.net">gregp@blackened.net</ulink>&gt;.
          </para>

    <para>XXX - passphrase protected keys cannot be used here</para>

    <programlisting>
      <!-- Do a raw insert of the contents of the challenge.irc file -->

      <![ RCDATA [
&challenge.irc;
      ]]>
    </programlisting>
  </appendix>

</article>
